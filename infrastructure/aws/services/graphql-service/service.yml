Description: This is an example of a long running ECS service that serves graphql.

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  DBEndpoint:
    Description: The url of the Database
    Type: String

  LoadBalancer:
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

Resources:
  Service:
    Type: AWS::ECS::Service
    # DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: "graphql-service"
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: graphql-service
          Essential: true
          Image: hasura/graphql-engine:v1.3.3
          Memory: 1900
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: HASURA_GRAPHQL_DATABASE_URL
              Value: !Sub postgres://dbadmin:dbpAssw0rd@${DBEndpoint}:5432/postgres
            - Name: HASURA_GRAPHQL_ENABLE_CONSOLE
              Value: 'true'
            - Name: HASURA_GRAPHQL_ADMIN_SECRET
              Value: hasuraAdmin
            - Name: HASURA_GRAPHQL_LOG_LEVEL
              Value: debug
            - Name: HASURA_GRAPHQL_ENABLE_TELEMETRY
              Value: 'false'

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /console
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # HttpsListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     Certificates:
  #       - CertificateArn: arn:aws:acm:us-east-1:495634646531:certificate/1896d99b-0e35-444b-81c4-7f2ffe48471b
  #     DefaultActions:
  #       - TargetGroupArn: !Ref TargetGroup
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS

  # HttpRedirectListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions:
  #       - RedirectConfig:
  #           Host: '#{host}'
  #           Path: '/#{path}'
  #           Port: '443'
  #           Protocol: 'HTTPS'
  #           Query: '#{query}'
  #           StatusCode: HTTP_301
  #         Type: redirect
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole

      Policies:
        - PolicyName: !Sub ECSRole-${AWS::StackName}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:Describe*'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'elasticloadbalancing:RegisterTargets'
                Resource: '*'

